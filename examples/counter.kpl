(defun as_is (cnt v)
	(assign core (+ (invoke cnt core) v) cnt)
)

(defun double_value (cnt v)
	(assign core (+ (invoke cnt core) (* v 2)) cnt)
)

(defun counter (init)
	(assign add as_is init)
)

(setq m (counter 0))
((invoke m add) m 1)
(setq m (assign add double_value m))
((invoke m add) m 1)

(defun list_evaluation (lst cnt)
	(cond
		((nil lst) cnt)
		(t (list_evaluation (cdr lst) ((invoke cnt add) cnt (car lst))))
	)
)

(setq n (counter 0))
(setq n (assign add double_value n))
(setq n (list_evaluation (list 3 5 8) n))

(defun complex (A B)
	(assign a A
	(assign b B
	(assign + (defun _temp (comp1 comp2)
			(complex (+ (a comp1) (a comp2)) (+ (b comp1) (b comp2)))
		)
	(assign - (defun _temp (comp1 comp2)
			(complex (- (a comp1) (a comp2)) (- (b comp1) (b comp2)))
		)
	(assign * (defun _temp (comp1 comp2)
			(complex (- (* (a comp1) (a comp2)) (* (b comp1) (b comp2)))
					 (+ (* (a comp1) (b comp2)) (* (b comp1) (a comp2)))
			)
		)
			())))))
)

(setq x (complex 4 2))
(setq y (complex 3 5))
(setq z (* x y))

(defun list_sum (lst)
	(cond
		((nil (cdr lst)) (car lst))
		(t (+ (car lst) (list_sum (cdr lst))))
	)
)

(list_sum (list 1 5 7))
(setq r (list_sum (list (complex 1 2) (complex 3 4))))
