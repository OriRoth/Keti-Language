; Utils ;
(define ! (lambda (b)
	(if b
		()
		t
	)
))
; Matrices ;
(define zeros (lambda (n)
	(if (= n 0)
		()
		(cons 0 (zeros (- n 1)))
	)
))
(define _mat_aux (lambda (n m)
	(if (= n 0)
		()
		(cons (zeros m) (_mat_aux (- n 1) m))
	)
))
(define mat (lambda (n m)
	(cons (cons n m) (_mat_aux n m))
))
(define _get_aux_2 (lambda (c l i)
	(if (= c i)
		(car l)
		(_get_aux_2 (+ c 1) (cdr l) i)
	)
))
(define _get_aux_1 (lambda (c m i j)
	(if (= c i)
		(_get_aux_2 0 (car m) j)
		(_get_aux_1 (+ c 1) (cdr m) i j)
	)
))
(define get (lambda (m i j)
	(_get_aux_1 0 (cdr m) i j)
))
(define _set_aux_2 (lambda (c l i v)
	(if (= c i)
		(cons v (cdr l))
		(cons (car l) (_set_aux_2 (+ c 1) (cdr l) i v))
	)
))
(define _set_aux_1 (lambda (c m i j v)
	(if (= c i)
		(cons (_set_aux_2 0 (car m) j v) (cdr m))
		(cons (car m) (_set_aux_1 (+ c 1) (cdr m) i j v))
	)
))
(define set (lambda (m i j v)
	(cons (car m) (_set_aux_1 0 (cdr m) i j v))
))
(define _behead (lambda (m)
	(if (nil m)
		()
		(cons (cdr (car m)) (_behead (cdr m)))
	)
))
(define _head (lambda (m)
	(if (nil m)
		()
		(cons (car (car m)) (_head (cdr m)))
	)
))
(define _transpose_aux (lambda (m)
	(if (nil (car m))
		()
		(cons (_head m) (_transpose_aux (_behead m)))
	)
))
(define transpose (lambda (m)
	(cons (cons (cdr (car m)) (car (car m))) (_transpose_aux (cdr m)))
))
(define _mul_aux_3 (lambda (l1 l2)
	(if (nil l1)
		0
		(+ ( * (car l1) (car l2)) (_mul_aux_3 (cdr l1) (cdr l2)))
	)
))
(define _mul_aux_2 (lambda (l m)
	(if (nil m)
		()
		(cons (_mul_aux_3 l (car m)) (_mul_aux_2 l (cdr m)))
	)
))
(define _mul_aux_1 (lambda (m1 m2)
	(if (nil m1)
		()
		(cons (_mul_aux_2 (car m1) m2) (_mul_aux_1 (cdr m1) m2))
	)
))
(define mul (lambda (m1 m2)
	(cons (cons (car (car m1)) (cdr (car m2))) (_mul_aux_1 (cdr m1) (cdr (transpose m2))))
))
(define _det_aux_4 (lambda (l i c)
	(if (= i c)
		(cdr l)
		(cons (car l) (_det_aux_4 (cdr l) i (+ c 1)))
	)
))
(define _det_aux_3 (lambda (m i)
	(if (nil m)
		()
		(cons (_det_aux_4 (car m) i 0) (_det_aux_3 (cdr m) i))
	)
))
(define _det_aux_2 (lambda (l m n i s)
	(if (nil l)
		0
		(if s
			(+ ( * (car l) (_det_aux_1 (_det_aux_3 m i) (- n 1))) (_det_aux_2 (cdr l) m n (+ 1 i) (! s)))
			(- (_det_aux_2 (cdr l) m n (+ 1 i) (! s)) ( * (car l) (_det_aux_1 (_det_aux_3 m i) (- n 1))))
		)
	)
))
(define _det_aux_1 (lambda (m n)
	(if (= n 1)
		(car (car m))
		(_det_aux_2 (car m) (cdr m) n 0 t)
	)
))
(define det (lambda (m)
	(_det_aux_1 (cdr m) (car (car m)))
))
; Testing ;
;     |1 2|
;     |3 4|
; x = |5 6|
(define x (mat 3 2))
(define x (set x 0 0 1))
(define x (set x 0 1 2))
(define x (set x 1 0 3))
(define x (set x 1 1 4))
(define x (set x 2 0 5))
(define x (set x 2 1 6))
;     | 7  8  9|
; y = |10 11 12|
(define y (mat 2 3))
(define y (set y 0 0 7))
(define y (set y 0 1 8))
(define y (set y 0 2 9))
(define y (set y 1 0 10))
(define y (set y 1 1 11))
(define y (set y 1 2 12))
; |x*y| = 0
(det (mul x y))
; |y*x| = 36
(det (mul y x))
