(defun list_sum (lst)
	(cond
		((nil lst) 0)
		(t (+ (car lst) (list_sum (cdr lst))))
	)
)

(defun contains (lst d)
	(cond
		((nil lst) ())
		((= (car lst) d) t)
		(t (contains (cdr lst) d))
	)
)

(defun blist (lst)
	(assign back ()
	(assign forth lst
	(assign left_nil ()
	(assign cdr (defun _temp (blst)
			(cond
				((nil (forth blst)) (error "right end reached"))
				((left_nil blst) (assign left_nil () blst))
				(t	(assign back (cons (car (forth blst)) (back blst))
					(assign forth (cdr (forth blst))
						blst))
				)
			)
		)
	(assign bcdr (defun _temp (blst)
			(cond
				((left_nil blst) (error "left end reached"))
				((nil (back blst)) (assign left_nil t blst))
				(t	(assign forth (cons (car (back blst)) (forth blst))
					(assign back (cdr (back blst))
						blst))
				)
			)
		)
	(assign car (defun _temp (blst)
			(cond
				((nil (forth blst)) (error "right end reached"))
				((left_nil blst) (error "left end reached"))
				(t (car (forth blst)))
			)
		)
	(assign contains (defun _temp (blst v)
			(or (contains (forth blst) v) (contains (back blst) v))
		)
	(assign nil (defun _temp (blst)
			(nil (forth blst))
		)
	(assign bnil (defun _temp (blst)
			(left_nil blst)
		)
	(assign rollback (defun _temp (blst)
			(cond
				((left_nil blst) (cdr blst))
				(t (rollback(bcdr blst)))
			)
		)
		()))))))))))
)

(setq x (blist (list 1 9 7 6 2 4)))
