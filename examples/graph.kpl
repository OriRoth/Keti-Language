(defun contains (lst d)
	(cond
		((nil lst) ())
		((= (car lst) d) t)
		(t (contains (cdr lst) d))
	)
)

(defun merge (l1 l2)
	(cond
		((nil l1) l2)
		(t (cons (car l1) (merge (cdr l1) l2)))
	)
)

(defun reverse (lst)
	(cond
		((nil lst) lst)
		(t (merge (reverse (cdr lst)) (list (car lst))))
	)
)

(defun evaluate_list (lst ev_func)
	(cond
		((nil lst) ())
		((nil (cdr lst)) (ev_func (car lst)))
		(t (+ (ev_func (car lst)) (evaluate_list (cdr lst) ev_func)))
	)
)

(defun quantity (d) 1)
(defun get_core (d) (core d))

(defun vertex (data n)
	(assign edges ()
	(assign name n
	(assign connect (defun _temp (v1 v2)
			(cond
				((contains (edges v1) v2) v1)
				(t (assign edges (cons v2 (edges v1)) v1))
			)
		)
	(assign scan (defun _temp (vlst front_insert)
			(cond
				((nil vlst) _route)
				((contains _visited (car vlst)) ((invoke (car vlst) scan) (cdr vlst) front_insert))
				(t (value 	(setq _visited (cons (car vlst) _visited))
							(setq _route (cons (car vlst) _route))
							(cond
								(front_insert (value
									((invoke (car vlst) scan) (edges (car vlst)) front_insert)
									((invoke (car vlst) scan) (cdr vlst) front_insert))
								)
								(t (value
									((invoke (car vlst) scan) (cdr vlst) front_insert)
									((invoke (car vlst) scan) (edges (car vlst)) front_insert))
								)
							)
							))
			)
		)
	(assign dfs (defun _temp (v)
			(value	(setq _visited ())
					(setq _route ())
					((invoke v scan) (list v) t)
					(reverse _route)
			)
		)
	(assign bfs (defun _temp (v)
			(value	(setq _visited ())
					(setq _route ())
					((invoke v scan) (list v) ())
					(reverse _route)
			)
		)
	(assign net_size (defun _temp (v)
			(evaluate_list (dfs v) quantity)
		)
	(assign net_value (defun _temp (v)
			(evaluate_list (dfs v) get_core)
		)
		data))))))))
)

(setq v1 (vertex 1 "v1"))
(setq v2 (vertex 2 "v2"))
(setq v3 (vertex 3 "v3"))
(setq v4 (vertex 4 "v4"))
(connect v1 v2)
(connect v1 v3)
(connect v2 v3)
(connect v3 v1)
(connect v3 v4)
(setq DFS (dfs v1))
(setq BFS (bfs v1))
