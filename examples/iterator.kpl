(defun not (x) (cond (x ()) (t t)))

(defun is_iterator (x)
	(and
		(supps x has_next)
		(supps x get_next)
	)
)

(defun iterator ()
	(assign has_next (defun _temp (iter) t)
	(assign get_next (defun _temp (iter)
			(value	(setq _current (core iter))
					(assign core (+ 1 (core iter)) iter)
					_current))
		0))
)

(setq x (iterator))
(get_next x)
(get_next x)
(get_next x)

(defun list_iterator (lst)
	(assign has_next (defun _temp (iter)
		(not (nil (core iter))))
	(assign get_next (defun _temp (iter) 
		(value	(setq _current (car (core iter)))
				(assign core (cdr (core iter)) iter)
				_current))
	(assign core lst
		(iterator))))
)

(setq li (list_iterator (list 5 3 7)))
(has_next li)
(get_next li)
(has_next li)
(get_next li)
(has_next li)
(get_next li)
(has_next li)

(defun limit_iterator (s e)
	(cond
		((> s e) (error "bad limit"))
		(t
	(assign end e
	(assign has_next (defun _temp (iter) (< (core iter) (+ (end iter) 1)))
	(assign get_next (defun _temp (iter)
			(cond
				((has_next iter) (value	(setq _current (core iter))
										(assign core (+ 1 (core iter)) iter)
										_current))
				(t (error "limit reached"))
			)
		)
		s))))))
)

(setq l (limit_iterator 7 9))
(has_next l)
(get_next l)
(has_next l)
(get_next l)
(has_next l)
(get_next l)
(has_next l)

(defun range (s e)
	(cond
		((> s e) ())
		(t (cons s (range (+ s 1) e)))
	)
)
