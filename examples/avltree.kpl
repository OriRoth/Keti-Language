(setq maxint 8000)
(setq -1 (- 0 1))
(setq -2 (- 0 2))

(defun max (a b)
	(cond
		((> a b) a)
		(t b)
	)
)

(defun merge (l1 l2)
	(cond
		((nil l1) l2)
		(t (cons (car l1) (merge (cdr l1) l2)))
	)
)

(defun merge3 (l1 l2 l3)
	(merge l1 (merge l2 l3))
)

(defun null ()
	(assign nil t
	(assign remove (defun _temp (n) ())
	(assign insert (defun _temp (n d) (avln d))
	(assign print (defun _temp (n) ())
	(assign height 0
	(assign bfactor 0
		()))))))
)

(defun avln (d)
	(assign data d
	(assign left (null)
	(assign right (null)
	(assign height 1
	(assign bfactor (defun _temp (n)
			(- (height (right n)) (height (left n)))
		)
	(assign fix_height (defun _temp (n)
			(assign height (+ (max (height (left n)) (height (right n))) 1) n)
		)
	(assign rotate_right (defun _temp (n)
			(value
				(setq _helper (left n))
				(assign left (right _helper) n)
				(assign right n _helper)
				(fix_height n)
				(fix_height _helper)
				_helper
			)
		)
	(assign rotate_left (defun _temp (n)
			(value
				(setq _helper (right n))
				(assign right (left _helper) n)
				(assign left n _helper)
				(fix_height n)
				(fix_height _helper)
				_helper
			)
		)
	(assign balance (defun _temp (n)
			(value
				(fix_height n)
				(cond
					((= (bfactor n) 2) (value
						(cond
							((> (bfactor (right n)) maxint)
								(assign right (rotate_right (right p)) n)
							)
							(t ())
						)
						(rotate_left n)
					))
					((= (bfactor n) -2) (value
						(cond
							((and (> (bfactor (left n)) 0) (< (bfactor (left n)) maxint))
								(assign left (rotate_left (left p)) n)
							)
							(t ())
						)
						(rotate_right n)
					))
					(t n)
				)
			)
		)
	(assign insert (defun _temp (n new_data)
			(cond
				((< new_data (data n)) (balance (assign left (insert (left n) new_data) n)))
				(t (balance (assign right (insert (right n) new_data) n)))
			)
		)
	(assign find_min (defun _temp (n)
			(cond
				((nil (left n)) n)
				(t (find_min (left n)))
			)
		)
	(assign remove_min (defun _temp (n)
			(cond
				((nil (left n)) (right n))
				(t (balance (assign left (remove_min (left n)) n)))
			)
		)
	(assign remove (defun _temp (n old_data)
			(cond
				((< old_data (data n)) (balance (assign left (remove (left n) old_data) n)))
				((> old_data (data n)) (balance (assign right (remove (right n) old_data) n)))
				(t (value
					(setq _left (left n))
					(setq _right (right n))
					(cond
						((nil _right) _left)
						(t (value
							(setq _min (find_min _right))
							(assign right (remove_min right) _min)
							(assign left (_left) _min)
							(balance _min)
						))
					)
				))
			)
		)
	(assign print (defun _temp (n)
			(merge3 (print (left n)) (list (data n)) (print (right n)))
		)
		()))))))))))))))
)

(defun avlt ()
	(assign size 0
	(assign head ()
	(assign insert (defun _temp (r new_data)
			(value
				(assign size (+ (size r) 1) r)
				(cond
					((nil (head r)) (assign head (avln new_data) r))
					(t (assign head (insert (head r) new_data) r))
				)
				r
			)
		)
	(assign remove (defun _temp (r old_data)
			(value
				(assign size (- (size r) 1) r)
				(remove (head r) old_data)
				r
			)
		)
	(assign print (defun _temp (r)
			(print (head r))
		)
		())))))
)

(setq x (avlt))
(size x)
(insert x 8)
(insert x 4)
(insert x 2)
(insert x 5)
(insert x 0)
(insert x 1)
(insert x 6)
(insert x 3)
(insert x 7)
(insert x 9)
(setq s (print x))
